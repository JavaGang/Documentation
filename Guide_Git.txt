Гайд для работы со своим тех. заданием (далее ТЗ) через консоль:
 
1. Проверить последнюю версию приложения и обновить ее с удаленной ветки Деловера:
команда git pull origin development
1.1 если нужно обновить последлюю версию с другой  ветки заместо ветки деволера указать которая нужна

2.Создать локальную новую ветку для ТЗ в которой будите работать и вылаживать  свой код для ривью.
команда git branch название_ветки
2.1 Если нужно переключитья на рабочую локальную ветку
команда git checkout название ветки
2.3 Если нужно обновить ветку(выкачать изменения) в которой вы работаете(особенно если 2 человека работают над ТЗ)
команда git pull origin название_ветки

3. Сохранение(pull, push) в ветку в которой вы работаете(НЕ СОХРАНЯТЬ напрямую в деволвер)
команда 
3.1. git add .
3.2. git commit -m "some commit"
3.3. git push origin название_вашей(локальной ветки)

4. Реквест пул, мержим в вветку деволвер делаем вместе или после ревью кода. Делаем уже на веб интерфейсе(Скорей всего будет заниматься этим 1-2 человека)



Работа с Git	
Основные команды Git
git add . (добавляем файлы в локальный репозиторий)
git commit -m “some commit” (делаем комментарий)
git push origin HEAD (добавляем изменения в удаленный репозиторий)
git pull (подтягивание изменений с удаленного репозитория)
Совет. git pull = git fetch + git merge
git fetch (просто подтягивает изменения)
git merge origin/master (слияние текущей ветки с удаленной
Ветвления в Git
git branch (смотрим какие ветки существуют в локальном репозитории)
git branch add_user (создаём новую ветку add_entity)
Совет. Под каждый новый таск создаём новую ветку
git checkout add_user (переходим на ветку add_user)
git status
git add .
git commit -m “add user ready”
git branch --merged (смотрим ветки которые у нас смержены)
git branch -d add_user (удаляем эту ветку)
git branch 

Совет. Несмерженные ветки мы сможем удалить следующим способом
git --no-merged (смотрим несмерженные ветки)
git branch -D название_ветки
Цикл заканчивается
